// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique  // Clerk user ID
  email         String    @unique 
  username      String?   @unique // Optional username
  name          String?
  imageUrl      String?   // URL to the user's profile image
  industry      String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  //Profile fields
  bio           String?
  experience    String?
  skills        String[]

  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
}

model Assessment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  quizScore   Float?
  questions    Json[]  // Array of { question, answer, userAnswer, isCorrect }
  category    String? // e.g., "Technical", "Behavioral"
  improvementTips String? // Tips for improvement based on assessment results given by AI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId]) // Index for faster lookups by user
}

  
model Resume {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  content     String   @db.Text // Store resume content as text
  atsScore    Float?  // ATS score for the resume
  feedback    String? // Feedback on the resume given by AI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CoverLetter {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  content     String   
  jobDescription String? // Optional job description to tailor the cover letter
  companyName String // Company name for the cover letter
  jobTitle    String // position applied for
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId]) // Index for faster lookups by user
}

model IndustryInsight {
  id          String   @id @default(cuid())
  industry    String   @unique // e.g., "Technology", "Healthcare"
  users       User[]

  //salary Data
  salaryRange Json[] // Array of { jobTitle, minSalary, maxSalary }

  //Industry trends
  growthRate      Float
  demandLevel     DemandLevel // e.g., "High", "Medium", "Low"
  topSkills       String[] // Array of top skills in the industry

  //Market conditions
  marketOutlook       MarketOutlook // e.g., "Positive", "Neutral", "Negative"
  keyTrends           String[] // Array of current industry trends

  //learning suggestions
  recommendedSkills String[] // Array of skills recommended for the industry

  lastUpdated     DateTime @default(now()) // Last updated timestamp for insights
  nextUpdate      DateTime

  @@index([industry]) // Index for faster lookups by industry
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}
enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}